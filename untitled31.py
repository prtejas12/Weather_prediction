# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wf-D0_Zo5_T5u5LsEHVcGq4sXnHqfoW6

<h1><b>Extreme-Weather Temperature Prediction</b></h>

<h4>Steps:</h4>
1.Dataset Download<br>
2.Exploratry Data Analysis<br>
3.Data Visualization<br>
4.Model selection<br>
5.Model Fitting<br>
6.Accuracy Scores<br>
<small><i>Note:The 2nd and 3rd steps can be done parallely</i></small>

**Importing all the libraries requied**
"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor

"""**Read the dataset using pandas**"""

dataset=pd.read_csv("train_dataset.csv")

dataset.tail(15)

"""**About the Dataset**"""

dataset.describe()

dataset.info()

dataset["Next_Tmax"]

"""**Total number of null in taget colomns**"""

#The target column is Next_Tmax
total=6589-6567
total#total number of null values

"""*Drop the null values that are present in target column*"""

dataset.dropna(subset=["Next_Tmax"],inplace=True)

"""<b>Split the dataset <ul><li>x->Independent features</li><li>y->Dependent feature(Target)</li></ul> """

x=dataset.drop("Next_Tmax",axis=1)
y=dataset["Next_Tmax"]

list=dataset.select_dtypes(include="float64").columns.tolist()

list.pop()

"""**Correlation between colomns**"""

plt.figure(figsize=(12,9))
sns.heatmap(dataset.corr(),annot=True);

"""From the above plot we can observe that the Next_Tmax has high correlation with the below ploted features"""

sns.lineplot(data=dataset,x=x["Present_Tmax"],y=y)
plt.title("Present_Tmax vs Next_Tmax")

sns.lineplot(data=dataset,x="Present_Tmin",y=y)
plt.title("Present_Tmin vs Next_Tmax")

sns.boxplot(dataset["Next_Tmax"])

"""From the above box-plot we find that there are few outliers

<b>Fill all the null values with the respective mean of the respective columns</b>
"""

imputer=SimpleImputer(strategy="mean").fit(dataset[list])
x[list]=imputer.transform(x[list])

x.tail()

x.info()

"""**Creating Validation set to validate using<br> 
1.LinearRegression<br>
2.SVM(SVR)<br>
3.DessionTree**
"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

modellr=LinearRegression()
modellr.fit(x_train,y_train)
y_predlr=modellr.predict(x_test)
modelsvm=SVR()
modelsvm.fit(x_train,y_train)
y_pred=modelsvm.predict(x_test)
modeldt=DecisionTreeRegressor()
modeldt.fit(x_train,y_train)
y_predt=modeldt.predict(x_test)

import math
print("SVR RMS=",math.sqrt(mean_squared_error(y_pred,y_test)))
print("LinearRegresssion RMS=",math.sqrt(mean_squared_error(y_predlr,y_test)))
print("DessionTree RMS=",math.sqrt(mean_squared_error(y_predt,y_test)))

"""we find that LinearRegression gives the most accurate resultes

**Using LinearRegression and svm prediction for the test set given**

**Fitting the Model (LinearRegression) **
"""

model=LinearRegression().fit(x,y)

"""<h4><b>Test Dataset Cleaning</b></h4>"""

testdataset=pd.read_csv("test_dataset.csv")

testdataset

testdataset.info()

x_test=testdataset[list]
imputer0=SimpleImputer(strategy="mean").fit(testdataset[list])
x_test[list]=imputer0.transform(x_test[list])

x_test

x_test.info()

output=pd.DataFrame(model.predict(x_test))

output.to_csv("output0.csv")

output

